{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","class","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","className","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlfor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","showAlert","navigator","clipboard","writeText","split","join","SpeechSynthesisUtterance","window","speechSynthesis","speak","length","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.490590a5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    \r\n         props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n          <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n              \r\n          </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n              <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n              <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                  <span className=\"navbar-toggler-icon\"></span>\r\n              </button>\r\n              <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                  <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                      <li className=\"nav-item\">\r\n                          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                      </li>\r\n                      {/* <li className=\"nav-item\">\r\n                          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                      </li> */}\r\n\r\n                  </ul>\r\n                  {/* <form className=\"d-flex\" role=\"search\">\r\n                      <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                      <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                  </form> */}\r\n                  <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                          <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n      </nav>\r\n\r\n  )\r\n}\r\nNavbar.propTypes={\r\n    title: PropTypes.string.isRequired, \r\n    aboutText: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps ={\r\n    title:'Set title Here',\r\n    aboutText : 'About'\r\n};\r\n\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to upper case\", \"success\");\r\n    }\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lower case\", \"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Cleared\", \"success\");\r\n    }\r\n    const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n        props.showAlert(\"Speak Successfully\", \"success\");\r\n    }\r\n    \r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n    const handleSpaces=()=>{\r\n        let newText =  text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Handle spaces successfully\", \"success\");\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copied to Clipboard\", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\" ; // wrong way to change the state\r\n    // setText(\"new text\"); //correct way\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n          <h1>{props.heading}</h1>\r\n          <div className=\"mb-3\">\r\n              <textarea className=\"form-control\" value ={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'#042743'}} id=\"myBox \" rows=\"8\"></textarea>\r\n          </div>\r\n      <button className =\"btn btn-primary mx-1\" onClick={handleUpClick}> Convert to UpperCase</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}> Convert to LowerCase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}> Clear Text</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleCopy}> Copy Text</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleSpaces}> Remove Extra Spaces</button>\r\n      <button type=\"submit\" onClick={speak} className=\"btn btn-primary mx-2 my-2\">Speak</button>\r\n    </div>\r\n            <div className=\"conatiner my-3\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n        <h2>Your text Summary is:</h2>\r\n                <p><b>{text.split(\" \").length} words and {text.length} characters</b></p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes to read </p>\r\n        <h2>Preview of Text</h2>\r\n        <p>{text.length>0?text:\"Enter something in the text box to preview it here\"}</p>\r\n    </div>\r\n        </>\r\n  )\r\n}\r\n","import './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\n\nimport React, { useState } from 'react';\n// import{BrowserRouter,\n// Routes,\n// Route,\n// }from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode,setMode] = useState('light') //whether dark mode is enabled or not\n  const [alert,setAlert] = useState(null);\n  const showAlert=(message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n\n    setTimeout(()=>{\n      setAlert(null);\n    },2000);\n\n  }\n\n\n  const toggleMode=()=>{\n    if(mode==='light'){\n    setMode('dark');\n    document.body.style.backgroundColor ='#042743';\n    showAlert(\"Dark mode has been enabled\",\"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\",\"success\");\n    }\n  }\n  return (\n    <>\n      {/* <BrowserRouter> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n\n          {/* <Routes>\n            <Route exact path=\"/\" element={<TextForm heading=\"Enter your text to analyse\" mode={mode} showAlert={showAlert} />} />\n            <Route exact path=\"about\" element={<About />} />\n          </Routes> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the Text to analyze here\" mode={mode}/>\n        </div>\n      {/* </BrowserRouter> */}\n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}